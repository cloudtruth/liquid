"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[215],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2105:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={},p="liquid.loaders.FileSystemLoader",s={unversionedId:"api/filesystemloader",id:"api/filesystemloader",title:"liquid.loaders.FileSystemLoader",description:"A loader that loads templates from one or more directories on the file system.",source:"@site/docs/api/filesystemloader.md",sourceDirName:"api",slug:"/api/filesystemloader",permalink:"/liquid/api/filesystemloader",editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/api/filesystemloader.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"liquid.BoundTemplate",permalink:"/liquid/api/BoundTemplate"},next:{title:"liquid.loaders.FileExtensionLoader",permalink:"/liquid/api/fileextensionloader"}},c=[{value:"<code>FileSystemLoader</code>",id:"filesystemloader",children:[],level:2},{value:"Properties",id:"properties",children:[{value:"<code>search_path</code>",id:"search_path",children:[],level:3}],level:2},{value:"Methods",id:"methods",children:[{value:"<code>get_source</code>",id:"get_source",children:[],level:3},{value:"<code>get_source_async</code>",id:"get_source_async",children:[],level:3}],level:2}],d={toc:c};function u(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"liquidloadersfilesystemloader"},"liquid.loaders.FileSystemLoader"),(0,i.kt)("p",null,"A loader that loads templates from one or more directories on the file system."),(0,i.kt)("h2",{id:"filesystemloader"},(0,i.kt)("inlineCode",{parentName:"h2"},"FileSystemLoader")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"class FileSystemLoader(search_path, encoding)")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"search_path: Union[str, Path, Iterable[Union[str, Path]]]")," - One or more paths to search.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},'encoding: str = "utf-8"')," - Open template files with the given encoding. Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},'"utf-8"'),"."))),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"search_path"},(0,i.kt)("inlineCode",{parentName:"h3"},"search_path")),(0,i.kt)("p",null,"A list of paths to search."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"List[pathlib.Path]")),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"get_source"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_source")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"get_source(environment, template_name)")),(0,i.kt)("p",null,"Searches each path in ",(0,i.kt)("inlineCode",{parentName:"p"},"search_path"),", in turn, returning the first template source it finds."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Raises"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"liquid.exceptions.TemplateNotFound")," if a template with the given name can not be\nfound.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("strong",{parentName:"p"},"Returns"),": The source, filename and reload function for the named template.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("strong",{parentName:"p"},"Return Type"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"liquid.loaders.TemplateSource")),(0,i.kt)("h3",{id:"get_source_async"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_source_async")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"async get_source(environment, template_name)")),(0,i.kt)("p",null,"An async version of ",(0,i.kt)("a",{parentName:"p",href:"#get_source"},"get_source"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),": The source, filename and reload function for the named template.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("strong",{parentName:"p"},"Return Type"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"liquid.loaders.TemplateSource")))}u.isMDXComponent=!0}}]);