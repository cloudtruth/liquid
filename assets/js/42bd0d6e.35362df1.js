"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[724],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,f=u["".concat(s,".").concat(m)]||u[m]||c[m]||r;return n?a.createElement(f,o(o({ref:t},d),{},{components:n})):a.createElement(f,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6954:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return u}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={sidebar_position:1},s="Introduction to Liquid",p={unversionedId:"language/introduction",id:"language/introduction",isDocsHomePage:!1,title:"Introduction to Liquid",description:"Liquid is a template language, where source text (the template) contains placeholders for variables,",source:"@site/docs/language/introduction.md",sourceDirName:"language",slug:"/language/introduction",permalink:"/liquid/language/introduction",editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/language/introduction.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"languageSidebar",next:{title:"Liquid Filters",permalink:"/liquid/language/filters"}},d=[{value:"Output",id:"output",children:[],level:2},{value:"Tags",id:"tags",children:[],level:2},{value:"Literals",id:"literals",children:[],level:2},{value:"Filters",id:"filters",children:[],level:2},{value:"Types",id:"types",children:[],level:2}],c={toc:d};function u(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"introduction-to-liquid"},"Introduction to Liquid"),(0,r.kt)("p",null,"Liquid is a template language, where source text (the template) contains placeholders for variables,\nconditional expressions for including or excluding blocks of text, and loops for repeating blocks of\ntext. Any block can contain more variables, conditions and loops."),(0,r.kt)("p",null,"Output text is the result of ",(0,r.kt)("em",{parentName:"p"},"rendering")," a template given some data model. It is that data model\nthat provides the variables and objects referenced in a template's expressions."),(0,r.kt)("p",null,"Liquid is most commonly used with HTML, but can be used with any text-based content. Consider this\ntemplate."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign greeting = "Hello" %}\n{% for person in people %}\n{{ greeting }}, {{ person.name }}!\n{% endfor %}\n')),(0,r.kt)("h2",{id:"output"},"Output"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"{{ person.name }}")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"{{ greeting }}")," are output statements. Expressions inside double curly\nbraces are evaluated and the result is inserted into the output text at that location. These\nexpressions can be simple variables, elements from Liquid arrays (Python lists or tuples) or objects\n(Python dicts or classes) with properties."),(0,r.kt)("h2",{id:"tags"},"Tags"),(0,r.kt)("p",null,"Tags allow us to include logic, like loops and conditions, in our Liquid templates. A tag can be\nan ",(0,r.kt)("em",{parentName:"p"},"inline")," tag or a ",(0,r.kt)("em",{parentName:"p"},"block")," tag, and can add to rendered output text or not."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"{% for person in people %}")," is the start of a block tag. Enclosed by ",(0,r.kt)("inlineCode",{parentName:"p"},"{%")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"%}")," by default.\nWhere ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," is the name of the tag and ",(0,r.kt)("inlineCode",{parentName:"p"},"person in people")," is the tag's expression. The ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," tag\nbehaves like a for-each loop, rendering its block once for each item in an iterable object. Every\nblock tag must have a matching ",(0,r.kt)("em",{parentName:"p"},"end tag"),", which, by convention, follows the pattern\n",(0,r.kt)("inlineCode",{parentName:"p"},"{% end<tag name> %}"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},'{% assign greeting = "Hello" %}')," is an inline tag. Inline tags don't have a block or an associated\nend tag. See the ",(0,r.kt)("a",{parentName:"p",href:"tags"},"tag reference")," for details of all tags built-in to Liquid."),(0,r.kt)("h2",{id:"literals"},"Literals"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},", ")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"!\\n")," are template literals. With the exception of ",(0,r.kt)("a",{parentName:"p",href:"whitespace-control"},"whitespace control"),",\ntemplate literals are output unchanged."),(0,r.kt)("h2",{id:"filters"},"Filters"),(0,r.kt)("p",null,"Variables can be modified prior to output or assignment using ",(0,r.kt)("em",{parentName:"p"},"filters"),". Filters are applied to a\nvariable using the pipe symbol (",(0,r.kt)("inlineCode",{parentName:"p"},"|"),"), followed by the filter's name and, possibly, some filter\narguments. Filter arguments appear after a colon (",(0,r.kt)("inlineCode",{parentName:"p"},":"),") and are separated by commas (",(0,r.kt)("inlineCode",{parentName:"p"},","),")."),(0,r.kt)("p",null,"Multiple filters can be chained, effectively piping the output of one filter into the input of\nanother. Here we use the ",(0,r.kt)("a",{parentName:"p",href:"../language/filters#sort"},"sort")," and ",(0,r.kt)("a",{parentName:"p",href:"../language/filters#first"},"first"),"\nfilters to get the cheapest item in a collection of products."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign cheapest = collection.products | sort: "price" | first %}\n')),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"filters"},"filter reference")," for details of all filters built-in to Liquid."),(0,r.kt)("h2",{id:"types"},"Types"),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},'Being a Ruby project, the reference implementation of Liquid borrows terms and types found in Ruby.\nLike "array" and "hash". Python equivalents would be "list" and "dictionary", or anything that\nimplements the ',(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence"},"Sequence"),"\nor ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping"},"Mapping"),"\ninterfaces, respectively."))),(0,r.kt)("p",null,"Liquid supports literal strings (",(0,r.kt)("inlineCode",{parentName:"p"},'"hello"')," or ",(0,r.kt)("inlineCode",{parentName:"p"},"'hello'"),"), integers (",(0,r.kt)("inlineCode",{parentName:"p"},"1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"-35"),"), floats (",(0,r.kt)("inlineCode",{parentName:"p"},"0.42"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"-99"),") and booleans (",(0,r.kt)("inlineCode",{parentName:"p"},"true")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),")."),(0,r.kt)("p",null,"There is no literal syntax for creating arrays or hashes, although these types (or their Python\nequivalents) can be added to a template's render context, and many tags and filters are designed to\nwork with them."),(0,r.kt)("p",null,"A ",(0,r.kt)("em",{parentName:"p"},"range")," literal is a start and stop integer, separated by two periods (",(0,r.kt)("inlineCode",{parentName:"p"},".."),"), and enclosed in parentheses. The resulting range is inclusive of its stop value. Ranges can be iterated and many of\nthe built-in filters that accept an array will also work with a range."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{% assign foo = (1..5) %}\n{{ foo | join: ',' }}\n\n{% for i in (3..6) %}\n    {{ i | plus: forloop.index }}\n{% endfor %}\n")),(0,r.kt)("p",null,"The reserved word ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," is used to represent the absence of a value. In Python Liquid, ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," is\nequal to ",(0,r.kt)("inlineCode",{parentName:"p"},"None"),"."))}u.isMDXComponent=!0}}]);