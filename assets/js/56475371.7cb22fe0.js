"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[838],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return u}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(t),u=a,f=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7805:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],s={},l="Objects and Drops",p={unversionedId:"introduction/objects-and-drops",id:"introduction/objects-and-drops",isDocsHomePage:!1,title:"Objects and Drops",description:"Python Liquid uses getitem",source:"@site/docs/introduction/objects-and-drops.md",sourceDirName:"introduction",slug:"/introduction/objects-and-drops",permalink:"/liquid/introduction/objects-and-drops",editUrl:"https://github.com/jg-rp/liquid/tree/gh-pages/docs/docs/introduction/objects-and-drops.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Render Context",permalink:"/liquid/introduction/render-context"},next:{title:"Strictness",permalink:"/liquid/introduction/strictness"}},c=[],d={toc:c};function m(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"objects-and-drops"},"Objects and Drops"),(0,o.kt)("p",null,"Python Liquid uses ",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/reference/datamodel.html#object.__getitem__"},(0,o.kt)("strong",{parentName:"a"},"getitem")),"\ninternally for resolving property names and accessing items in a sequence. So, if your\n",(0,o.kt)("a",{parentName:"p",href:"render-context#render-arguments"},"data")," is some combination of dictionaries and lists, for example,\ntemplates can reference objects as follows."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="templates/some.liquid"',title:'"templates/some.liquid"'},"{{ products[0]title }}\n{{ products[-2]['available'] }}\n{{ products.last.title }}\n{{ products.first.colors | join: ', ' }}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid import FileSystemLoader\n\nexample_data = {\n    "products": [\n        {\n            "title": "Some Shoes",\n            "available": 5,\n            "colors": [\n                "blue",\n                "red",\n            ],\n        },\n        {\n            "title": "A Hat",\n            "available": 2,\n            "colors": [\n                "grey",\n                "brown",\n            ],\n        },\n    ]\n}\n\nenv = Environment(loader=FileSystemLoader("./templates/"))\ntemplate = env.get_template("some.liquid")\n\nprint(template.render(**example_data))\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Some Shoes\n5\nA Hat\nblue, red\n")),(0,o.kt)("p",null,"Attempting to access properties from a Python class or class instance will not work."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Template, StrictUndefined\n\nclass Product:\n    def __init__(self, title, colors):\n        self.title = title\n        self.colors = colors\n\nproducts = [\n    Product(title="Some Shoes", colors=["blue", "red"]),\n    Product(title="A Hat", colors=["grey", "brown"]),\n]\n\nTemplate("{{ products.first.title }}!").render(products=products)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"!\n")),(0,o.kt)("p",null,'This is by design, and is one of the reasons Liquid is considered "safe" and "suitable\nfor end users". To expose an object\'s properties we can implement Python\'s ',(0,o.kt)("inlineCode",{parentName:"p"},"Mapping"),"\nor ",(0,o.kt)("inlineCode",{parentName:"p"},"Sequence")," interface."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},'Python Liquid\'s equivalent of a "drop", as found in Ruby Liquid, is a Python object that implements\nthe ',(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence"},"Sequence")," or\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping"},"Mapping")," interface."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from collections import abc\nfrom liquid import Template, StrictUndefined\n\nclass User(abc.Mapping):\n    def __init__(\n        self,\n        first_name,\n        last_name,\n        perms,\n    ):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.perms = perms or []\n\n        self._keys = [\n            "first_name",\n            "last_name",\n            "is_admin",\n            "name",\n        ]\n\n    def __getitem__(self, k):\n        if k in self._keys:\n            return getattr(self, k)\n        raise KeyError(k)\n\n    def __iter__(self):\n        return iter(self._keys)\n\n    def __len__(self):\n        return len(self._keys)\n\n    def __str__(self):\n        return f"User(first_name=\'{self.first_name}\', last_name=\'{self.last_name}\')"\n\n    @property\n    def is_admin(self):\n        return "admin" in self.perms\n\n    @property\n    def name(self):\n        return f"{self.first_name} {self.last_name}"\n\n\nuser = User("John", "Smith", ["admin"])\n\nprint(Template("{{ user.first_name }}").render(user=user))  # John\nprint(Template("{{ user.name }}").render(user=user))  # John Smith\nprint(Template("{{ user.is_admin }}").render(user=user))  # true\n\nprint(Template("{{ user.perms[0] }}", undefined=StrictUndefined).render(user=user))\n# UndefinedError: key error: \'perms\', user[perms][0], on line 1\n')),(0,o.kt)("p",null,'One could implement a simple "Drop" wrapper for data access objects like this, while\nstill being explicit about which properties are exposed to templates.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Drop(abc.Mapping):\n    def __init__(obj, keys):\n        self.obj = obj\n        self.keys = keys\n\n    def __getitem__(self, k):\n        # Delegate attribute access to self.obj only if `k` is in `self.keys`.\n        if k in self.keys:\n            return getattr(obj, k)\n        raise KeyError(k)\n\n    def __iter__(self):\n        return iter(self.keys)\n\n    def __len__(self):\n        return len(self.keys)\n")),(0,o.kt)("p",null,"By implementing the ",(0,o.kt)("inlineCode",{parentName:"p"},"__liquid__")," method, Python class instances can behave like primitive Liquid\ndata types. This is useful for situations where you need your Python object to act as an array\nindex, or to be compared to a primitive data type, for example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Template\n\nclass IntDrop:\n    def __init__(self, val: int):\n        self.val = val\n\n    def __int__(self) -> int:\n        return self.val\n\n    def __str__(self) -> str:\n        return "one"\n\n    def __liquid__(self) -> int:\n        return self.val\n\n\ntemplate = Template(\n    "{% if my_drop < 10 %}"\n    "{{ my_drop }} "\n    "{% endif %}"\n    "{{ some_array[my_drop] }}"\n)\n\ncontext_data = {\n    "my_drop": IntDrop(1),\n    "some_array": ["a", "b", "c"],\n}\n\nprint(template.render(**context_data))  # one b\n')))}m.isMDXComponent=!0}}]);