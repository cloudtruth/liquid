"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[215],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(r),m=a,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},2105:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],l={},p="liquid.loaders.FileSystemLoader",s={unversionedId:"api/filesystemloader",id:"api/filesystemloader",isDocsHomePage:!1,title:"liquid.loaders.FileSystemLoader",description:"A loader that loads templates from one or more directories on the file system.",source:"@site/docs/api/filesystemloader.md",sourceDirName:"api",slug:"/api/filesystemloader",permalink:"/liquid/api/filesystemloader",editUrl:"https://github.com/jg-rp/liquid/tree/gh-pages/docs/docs/api/filesystemloader.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"liquid.BoundTemplate",permalink:"/liquid/api/BoundTemplate"},next:{title:"liquid.loaders.ChoiceLoader",permalink:"/liquid/api/choiceloader"}},c=[{value:"<code>FileSystemLoader</code>",id:"filesystemloader",children:[],level:2},{value:"Properties",id:"properties",children:[{value:"<code>search_path</code>",id:"search_path",children:[],level:3}],level:2},{value:"Methods",id:"methods",children:[{value:"<code>get_source</code>",id:"get_source",children:[],level:3},{value:"<code>get_source_async</code>",id:"get_source_async",children:[],level:3}],level:2}],d={toc:c};function u(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"liquidloadersfilesystemloader"},"liquid.loaders.FileSystemLoader"),(0,o.kt)("p",null,"A loader that loads templates from one or more directories on the file system."),(0,o.kt)("h2",{id:"filesystemloader"},(0,o.kt)("inlineCode",{parentName:"h2"},"FileSystemLoader")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"class FileSystemLoader(search_path, encoding)")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"search_path: Union[str, Path, Iterable[Union[str, Path]]]")," - One or more paths to search.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},'encoding: str = "utf-8"')," - Open template files with the given encoding. Defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},'"utf-8"'),"."))),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("h3",{id:"search_path"},(0,o.kt)("inlineCode",{parentName:"h3"},"search_path")),(0,o.kt)("p",null,"A list of paths to search."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Type"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"List[pathlib.Path]")),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("h3",{id:"get_source"},(0,o.kt)("inlineCode",{parentName:"h3"},"get_source")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"get_source(environment, template_name)")),(0,o.kt)("p",null,"Searches each path in ",(0,o.kt)("inlineCode",{parentName:"p"},"search_path"),", in turn, returning the first template source it finds."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Raises"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"liquid.exceptions.TemplateNotFound")," if a template with the given name can not be\nfound.",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("strong",{parentName:"p"},"Returns"),": The source, filename and reload function for the named template.",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("strong",{parentName:"p"},"Return Type"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"liquid.loaders.TemplateSource")),(0,o.kt)("h3",{id:"get_source_async"},(0,o.kt)("inlineCode",{parentName:"h3"},"get_source_async")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"async get_source(environment, template_name)")),(0,o.kt)("p",null,"An async version of ",(0,o.kt)("a",{parentName:"p",href:"#get_source"},"get_source"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),": The source, filename and reload function for the named template.",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("strong",{parentName:"p"},"Return Type"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"liquid.loaders.TemplateSource")))}u.isMDXComponent=!0}}]);