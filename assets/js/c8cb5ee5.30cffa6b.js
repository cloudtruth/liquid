"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[814],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=i.createContext({}),d=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=d(e.components);return i.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(t),m=r,g=c["".concat(p,".").concat(m)]||c[m]||s[m]||a;return t?i.createElement(g,o(o({ref:n},u),{},{components:t})):i.createElement(g,o({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=c;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<a;d++)o[d]=t[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5672:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return d},toc:function(){return u},default:function(){return c}});var i=t(7462),r=t(3366),a=(t(7294),t(3905)),o=["components"],l={},p="Django Liquid",d={unversionedId:"guides/django-liquid",id:"guides/django-liquid",title:"Django Liquid",description:"A Django template backend for Python Liquid.",source:"@site/docs/guides/django-liquid.md",sourceDirName:"guides",slug:"/guides/django-liquid",permalink:"/liquid/guides/django-liquid",editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/guides/django-liquid.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Custom Loaders",permalink:"/liquid/guides/custom-loaders"},next:{title:"Flask Liquid",permalink:"/liquid/guides/flask-liquid"}},u=[{value:"Install",id:"install",children:[],level:2},{value:"Configure",id:"configure",children:[],level:2},{value:"Render",id:"render",children:[],level:2},{value:"Environment Factory",id:"environment-factory",children:[],level:2}],s={toc:u};function c(e){var n=e.components,t=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"django-liquid"},"Django Liquid"),(0,a.kt)("p",null,"A ",(0,a.kt)("a",{parentName:"p",href:"https://docs.djangoproject.com/en/4.0/topics/templates/"},"Django template backend")," for Python Liquid."),(0,a.kt)("h2",{id:"install"},"Install"),(0,a.kt)("p",null,"Install Django Liquid using ",(0,a.kt)("a",{parentName:"p",href:"https://pipenv.pypa.io/en/latest/"},"Pipenv"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ pipenv install django-liquid\n")),(0,a.kt)("p",null,"Or ",(0,a.kt)("a",{parentName:"p",href:"https://pip.pypa.io/en/stable/getting-started/"},"pip"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ python -m pip install -U django-liquid\n")),(0,a.kt)("h2",{id:"configure"},"Configure"),(0,a.kt)("p",null,"Configure Django Liquid with the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.djangoproject.com/en/4.0/topics/templates/#configuration"},(0,a.kt)("inlineCode",{parentName:"a"},"TEMPLATES"))," setting in your ",(0,a.kt)("inlineCode",{parentName:"p"},"settings.py")," file, using ",(0,a.kt)("inlineCode",{parentName:"p"},"django_liquid.liquid.liquid")," for the ",(0,a.kt)("inlineCode",{parentName:"p"},"BACKEND")," setting. This example keeps the default Django template backend configuration, as created with ",(0,a.kt)("a",{parentName:"p",href:"https://docs.djangoproject.com/en/4.0/ref/django-admin/#django-admin-startproject"},"startproject"),", and adds configuration for a Liquid template backend."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="settings.py"',title:'"settings.py"'},"TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n    {\n        'BACKEND': 'django_liquid.liquid.Liquid',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {},\n    },\n]\n")),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"APP_DIRS")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"True"),", Liquid will look for templates in the ",(0,a.kt)("inlineCode",{parentName:"p"},"liquid")," subdirectory of installed applications. ",(0,a.kt)("inlineCode",{parentName:"p"},"OPTIONS")," are passed to the ",(0,a.kt)("a",{parentName:"p",href:"/api/Environment"},"liquid.Environment()")," constructor. The default environment is configured as follows."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"autoescape"),": ",(0,a.kt)("inlineCode",{parentName:"li"},"True")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"loader"),": a ",(0,a.kt)("inlineCode",{parentName:"li"},"FileSystemLoader")," configured for ",(0,a.kt)("inlineCode",{parentName:"li"},"DIRS")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"APP_DIRS")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"undefined"),": ",(0,a.kt)("inlineCode",{parentName:"li"},"DebugUndefined")," if ",(0,a.kt)("inlineCode",{parentName:"li"},"settings.DEBUG")," else ",(0,a.kt)("inlineCode",{parentName:"li"},"Undefined"))),(0,a.kt)("h2",{id:"render"},"Render"),(0,a.kt)("p",null,"Render Liquid templates from your app views just like any other Django template backend."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="views.py"',title:'"views.py"'},'from django.shortcuts import render\n\ndef index(request):\n    context = {"greeting": "hello"}\n    return render(request, \'myapp/index.html\', context)\n')),(0,a.kt)("p",null,"If you've got multiple template engines configured, like in the example above, Django will use the first engine and template it finds matching the given template name. You can force Django to use a specific template engine with the ",(0,a.kt)("inlineCode",{parentName:"p"},"using")," argument to ",(0,a.kt)("inlineCode",{parentName:"p"},"render"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="views.py"',title:'"views.py"'},"from django.shortcuts import render\n\ndef index(request):\n    context = {\"greeting\": \"hello\"}\n    return render(request, 'myapp/index.html', context, using='liquid')\n")),(0,a.kt)("h2",{id:"environment-factory"},"Environment Factory"),(0,a.kt)("p",null,"You can configure your ",(0,a.kt)("a",{parentName:"p",href:"/api/Environment"},"liquid.Environment")," with additional tags or filters by setting the ",(0,a.kt)("inlineCode",{parentName:"p"},"environment")," template backend option to the name of an ",(0,a.kt)("inlineCode",{parentName:"p"},"Environment")," factory function. Lets say you want to register the ",(0,a.kt)("a",{parentName:"p",href:"http://localhost:3000/liquid/extra/introduction"},"json")," filter from ",(0,a.kt)("a",{parentName:"p",href:"/extra/introduction"},"python-liquid-extra"),". If the following is saved as ",(0,a.kt)("inlineCode",{parentName:"p"},"myproject/liquid.py"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="myproject/liquid.py"',title:'"myproject/liquid.py"'},'from liquid import Environment\nfrom liquid_extra import filters\n\ndef environment(**options):\n    env = Environment(**options)\n    env.add_filter("json", filters.JSON())\n    # Register more filters or tags here.\n    return env\n')),(0,a.kt)("p",null,"Then tell Django to use your environment factory function like this."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="settings.py"',title:'"settings.py"'},"TEMPLATES = [\n    {\n        'BACKEND': 'django_liquid.liquid.Liquid',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'environment': 'myproject.liquid.environment'\n        },\n    },\n]\n")))}c.isMDXComponent=!0}}]);