"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[823],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=p(n),m=a,f=s["".concat(c,".").concat(m)]||s[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=s;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},839:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return s}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={},c="liquid.loaders.DictLoader",p={unversionedId:"api/dictloader",id:"api/dictloader",title:"liquid.loaders.DictLoader",description:"A loader that loads templates from a dictionary mapping template names to template source strings.",source:"@site/docs/api/dictloader.md",sourceDirName:"api",slug:"/api/dictloader",permalink:"/liquid/api/dictloader",editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/api/dictloader.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"liquid.loaders.ChoiceLoader",permalink:"/liquid/api/choiceloader"},next:{title:"liquid.Context",permalink:"/liquid/api/context"}},u=[{value:"<code>DictLoader</code>",id:"dictloader",children:[],level:2},{value:"Methods",id:"methods",children:[{value:"<code>get_source</code>",id:"get_source",children:[],level:3},{value:"<code>get_source_async</code>",id:"get_source_async",children:[],level:3}],level:2}],d={toc:u};function s(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"liquidloadersdictloader"},"liquid.loaders.DictLoader"),(0,o.kt)("p",null,"A loader that loads templates from a dictionary mapping template names to template source strings."),(0,o.kt)("h2",{id:"dictloader"},(0,o.kt)("inlineCode",{parentName:"h2"},"DictLoader")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"class FileSystemLoader(templates)")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"templates: Dict[str, str]")," - A dictionary mapping template names to template source strings.")),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("h3",{id:"get_source"},(0,o.kt)("inlineCode",{parentName:"h3"},"get_source")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"get_source(environment, template_name)")),(0,o.kt)("p",null,"Return a template source by looping up the given name in the dictionary of templates."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Raises"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"liquid.exceptions.TemplateNotFound")," if a template with the given name can not be\nfound.",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("strong",{parentName:"p"},"Returns"),": The source, filename and reload function for the named template.",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("strong",{parentName:"p"},"Return Type"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"liquid.loaders.TemplateSource")),(0,o.kt)("h3",{id:"get_source_async"},(0,o.kt)("inlineCode",{parentName:"h3"},"get_source_async")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"async get_source(environment, template_name)")),(0,o.kt)("p",null,"An async version of ",(0,o.kt)("a",{parentName:"p",href:"#get_source"},"get_source"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),": The source, filename and reload function for the named template.",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("strong",{parentName:"p"},"Return Type"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"liquid.loaders.TemplateSource")))}s.isMDXComponent=!0}}]);